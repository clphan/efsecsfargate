AWSTemplateFormatVersion: '2010-09-09'
Description:  This template deploys a VPC, 2 public and 2 private subnets spread
  across two Availability Zones. 1 IGW, with a default route on the public subnets 
  default routes for them in the private subnets.

Parameters:
    EnvironmentName:
        Description: An environment name that is prefixed to resource names
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.11.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.20.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.21.0/24

    VolumeName:
        Description: The name to be used for the EFS volume
        Type: String
        MinLength: '1'
        Default: myEFSvolume

    MountPoint:
        Description: The Linux mount point for the EFS volume
        Type: String
        MinLength: '1'
        Default: myEFSvolume

    Image:
        Description: Number of instances to launch in your ECS cluster.
        Type: String
        Default: cloudphan/efsecsstorage:demo02

    ServiceName:
        Description: Put the ECS Service name
        Type: String
        Default: MyService

    ContainerPort:
        Type: Number
        Default: 80

    ContainerPath: 
        Description: Please enter the container path 
        Type: String
        Default: /server

    SourceVolumeName: 
        Type: String
        Default: volstorage

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2


    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    # DefaultPrivateRoute1:
    #     Type: AWS::EC2::Route
    #     Properties:
    #         RouteTableId: !Ref PrivateRouteTable1
    #         DestinationCidrBlock: 0.0.0.0/0

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    # DefaultPrivateRoute2:
    #     Type: AWS::EC2::Route
    #     Properties:
    #         RouteTableId: !Ref PrivateRouteTable2
    #         DestinationCidrBlock: 0.0.0.0/0

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    NoIngressSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "no-ingress-sg"
            GroupDescription: "Security group with no ingress rule"
            VpcId: !Ref VPC
    MountTargetSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                Ref: VPC
            GroupDescription: Security group for mount target
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '2049'
              ToPort: '2049'
              CidrIp: 0.0.0.0/0

    FileSystem:
        Type: AWS::EFS::FileSystem
        Properties:
            PerformanceMode: generalPurpose
            FileSystemTags:
            - Key: Name
              Value: !Ref VolumeName
                
    MountTarget:
        Type: AWS::EFS::MountTarget
        Properties:
            FileSystemId:
                Ref: FileSystem
            SubnetId:
                Ref: PublicSubnet1
            SecurityGroups:
            - Ref: MountTargetSecurityGroup
    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
        
    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        # Makes sure the log group is created before it is used.
        DependsOn: LogGroup
        Properties:
            Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
            ContainerDefinitions:
            - Name: !Ref ServiceName
              Image: !Ref Image
              PortMappings:
              - ContainerPort: !Ref ContainerPort
              LogConfiguration:
                LogDriver: awslogs
                Options:
                    awslogs-region: !Ref AWS::Region
                    awslogs-group: !Ref LogGroup
                    awslogs-stream-prefix: ecs-app
              MountPoints: 
              - ContainerPath: !Ref ContainerPath
                SourceVolume: !Ref SourceVolumeName
            # awsvpc is required for Fargate
            NetworkMode: awsvpc
            RequiresCompatibilities:
            - FARGATE
            Cpu: 256
            Memory: 0.5GB
            ExecutionRoleArn: !Ref ExecutionRole
            TaskRoleArn: !Ref TaskRole
            Volumes:
                - Name: !Ref SourceVolumeName
                  EFSVolumeConfiguration: 
                    FilesystemId: !Ref FileSystem
                    TransitEncryption: "DISABLED"

    ExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: ecs-tasks.amazonaws.com
                      Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
                - 'arn:aws:iam::019614656427:policy/ecsefsfilesystem-khanh'


    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: ecs-tasks.amazonaws.com
                      Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
                - 'arn:aws:iam::019614656427:policy/ecsefsfilesystem-khanh'

    ContainerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: !Ref ContainerPort
              ToPort: !Ref ContainerPort
              CidrIp: 0.0.0.0/0

    Service:
        Type: AWS::ECS::Service
        Properties: 
            ServiceName: !Ref ServiceName
            Cluster: !Ref Cluster
            PlatformVersion: "1.4.0"
            DeploymentConfiguration:
                MinimumHealthyPercent: 100
                MaximumPercent: 200
            DesiredCount: 1
            # This may need to be adjusted if the container takes a while to start up
            # HealthCheckGracePeriodSeconds: 0
            LaunchType: FARGATE
            NetworkConfiguration: 
                AwsVpcConfiguration:
                    # change to DISABLED if you're using private subnets that have access to a NAT gateway
                    AssignPublicIp: ENABLED
                    Subnets:
                    - !Ref PublicSubnet1
                    - !Ref PublicSubnet2
                    SecurityGroups:
                    - !Ref ContainerSecurityGroup
            TaskDefinition: !Ref TaskDefinition

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]
Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1

    PrivateSubnet2:
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2

    NoIngressSecurityGroup:
        Description: Security group with no ingress rule
        Value: !Ref NoIngressSecurityGroup
    
    MountTargetSecurityGroup:
        Description: Security group for EFS mount target
        Value: !Ref MountTargetSecurityGroup